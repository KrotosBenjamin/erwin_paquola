* feature_elimination - A package for preforming feature elimination

This is a package for feature elimination currently only supports random forest classification.

- Future implementation will include:
  + random forest regression
  + linear regression

Authors: Apu√£ Paquola, Kynon Benjamin, and Tarun Katipalli

If using please cite: XXX.

** Installation
=pip install --user feature_elimination=

** Reference Manual

| Function Name         | Description                                                                                        |
|-----------------------+----------------------------------------------------------------------------------------------------|
| [[refsec:one][=feature_elimination=]] | Runs random forest classification feature elimination                                              |
| [[refsec:two][=features_rank_fnc=]]   | Rank features                                                                                      |
| [[refsec:three][=n_features_iter=]]     | Determines the features to keep                                                                    |
| [[refsec:four][=oob_predictions=]]     | Extracts out-of-bag (OOB) predictions from random forest classifier classes                        |
| [[refsec:five][=oob_score_accuracy=]]  | Calculates the accuracy score for the OOB predictions                                              |
| [[refsec:six][=oob_score_nmi=]]       | Calculates the normalized mutual information score for the OOB predictions                         |
| [[refsec:seven][=oob_score_roc=]]       | Calculates the area under the ROC curve (AUC) for the OOB predictions                              |
| [[refsec:eight][=plot_acc=]]            | Plot feature elimination with accuracy as measurement                                              |
| [[refsec:nine][=plot_nmi=]]            | Plot feature elimination with NMI as measurement                                                   |
| [[refsec:ten][=plot_roc=]]            | Plot feature elimination with AUC ROC curve as measurement                                         |
| [[refsec:eleven][=rf_fe=]]               | Iterate over features to be eliminated                                                             |
| [[refsec:twelve][=rf_fe_step=]]          | Apply random forest to training data, rank features, and conduct feature elimination (single step) |
|                       |                                                                                                    |

*** =feature_elimination=
<<refsec:one>>

Runs random forest feature elimination step over iterator process.

*Args:*
  + estimator: Random forest classifier object
  + X: a data frame of training data
  + Y: a vector of sample labels from training data set
  + features: a vector of feature names
  + fold: current fold
  + out_dir: output directory. default '.'
  + elimination_rate: percent rate to reduce feature list. default .2
  + RANK: Output feature ranking. default=True (Boolean)

*Yields:*
  + dict: a dictionary with number of features, normalized mutual information score, accuracy score, and array of the indexes for features to keep
*** =feature_rank_fnc=
<<refsec:two>>

Ranks features.

*Args:*
 + features: A vector of feature names
 + rank: A vector with feature ranks based on absolute value of feature importance
 + n_features_to_keep: Number of features to keep. (Int)
 + fold: Fold to analyzed. (Int)
 + out_dir: Output directory for text file. Default '.'
 + RANK: Boolean (True or False)

*Yields:*
 + Text file: Ranked features by fold tab-delimited text file, only if RANK=True
*** =n_features_iter=
<<refsec:three>>

Determines the features to keep.

*Args:*
 + nf: current number of features
 + keep_rate: percentage of features to keep

*Yields:*
 + int: number of features to keep
*** =oob_predictions=
<<refsec:four>>

Extracts out-of-bag (OOB) predictions from random forest classifier classes.

*Args:*
  + estimator: Random forest classifier object

*Yields:*
  + vector: OOB predicted labels
*** =oob_score_accuracy=
<<refsec:five>>

Calculates the accuracy score from the OOB predictions.

*Args:*
  + estimator: Random forest classifier object
  + Y: a vector of sample labels from training data set

*Yields:*
  + float: accuracy score
*** =oob_score_nmi=
<<refsec:six>>

Calculates the normalized mutual information score from the OOB predictions.

*Args:*
  + estimator: Random forest classifier object
  + Y: a vector of sample labels from training data set

*Yields:*
  + float: normalized mutual information score
*** =oob_score_roc=
<<refsec:seven>>

Calculates the area under the ROC curve score for the OOB predictions.

*Args:*
  + estimator: Random forest classifier object
  + Y: a vector of sample labels from training data set

*Yields:*
  + float: AUC ROC score
*** =plot_acc=
<<refsec:eight>>

Plot feature elimination results for accuracy.

*Args:*
  + d: feature elimination class dictionary
  + fold: current fold
  + out_dir: output directory. default '.'

*Yields:*
  + graph: plot of feature by accuracy, automatically saves files as png and svg
*** =plot_nmi=
<<refsec:nine>>

Plot feature elimination results for normalized mutual information.

*Args:*
  + d: feature elimination class dictionary
  + fold: current fold
  + out_dir: output directory. default '.'

*Yields:*
  + graph: plot of feature by NMI, automatically saves files as png and svg
*** =plot_roc=
<<refsec:ten>>

Plot feature elimination results for AUC ROC curve.

*Args:*
  + d: feature elimination class dictionary
  + fold: current fold
  + out_dir: output directory. default '.'

*Yields:*
  + graph: plot of feature by AUC, automatically saves files as png and svg
*** =rf_fe=
<<refsec:eleven>>

Iterate over features to by eliminated by step.

*Args:*
  + estimator: Random forest classifier object
  + X: a data frame of training data
  + Y: a vector of sample labels from training data set
  + n_features_iter: iterator for number of features to keep loop
  + features: a vector of feature names
  + fold: current fold
  + out_dir: output directory. default '.'
  + RANK: Boolean (True or False)

*Yields:*
  + list: a list with number of features, normalized mutual information score, accuracy score, and array of the indices for features to keep
*** =rf_fe_step=
<<refsec:twelve>>

Apply random forest to training data, rank features, conduct feature elimination.

*Args:*
  + estimator: Random forest classifier object
  + X: a data frame of training data
  + Y: a vector of sample labels from training data set
  + n_features_to_keep: number of features to keep
  + features: a vector of feature names
  + fold: current fold
  + out_dir: output directory. default '.'
  + RANK: Boolean (True or False)

*Yields:*
  + dict: a dictionary with number of features, normalized mutual information score, accuracy score, and selected features
