#+TITLE: feature_elimination - A package for preforming feature elimination
#+AUTHOR: Kynon Benjamin


=feature_elimination= is a package for feature elimination currently only
supports random forest classification.

- Future implementation will include:
  + random forest regression
  + linear regression

Authors: Apu√£ Paquola, Kynon Benjamin, and Tarun Katipalli

If using please cite: XXX.

* Table of Contents
- [[#installation][Installation]]
- [[#reference-manual][Reference Manual]]
* Installation
=pip install --user feature_elimination=

* Reference Manual

| Function            | Description                                                                                        |
|---------------------+----------------------------------------------------------------------------------------------------|
| [[#feature-elimination-main][feature_elimination]] | Runs random forest classification feature elimination                                              |
| [[#feature-rank-function][features_rank_fnc]]   | Rank features                                                                                      |
| [[#n-feature-iterator][n_features_iter]]     | Determines the features to keep                                                                    |
| [[#oob-prediction][oob_predictions]]     | Extracts out-of-bag (OOB) predictions from random forest classifier classes                        |
| [[#oob-accuracy-score][oob_score_accuracy]]  | Calculates the accuracy score for the OOB predictions                                              |
| [[#oob-normalized-mutual-information-score][oob_score_nmi]]       | Calculates the normalized mutual information score for the OOB predictions                         |
| [[#oob-area-under-roc-curve-score][oob_score_roc]]       | Calculates the area under the ROC curve (AUC) for the OOB predictions                              |
| [[#plot-feature-elimination-by-accuracy][plot_acc]]            | Plot feature elimination with accuracy as measurement                                              |
| [[#plot-feature-elimination-by-nmi][plot_nmi]]            | Plot feature elimination with NMI as measurement                                                   |
| [[#plot-feature-elimination-by-auc][plot_roc]]            | Plot feature elimination with AUC ROC curve as measurement                                         |
| [[#feature-elimination-subfunction][rf_fe]]               | Iterate over features to be eliminated                                                             |
| [[#feature-elimination-step][rf_fe_step]]          | Apply random forest to training data, rank features, and conduct feature elimination (single step) |
|                     |                                                                                                    |

** Feature Elimination Main
=feature_elimination=

Runs random forest feature elimination step over iterator process.

*Args:*
  + estimator: Random forest classifier object
  + X: a data frame of training data
  + Y: a vector of sample labels from training data set
  + features: a vector of feature names
  + fold: current fold
  + out_dir: output directory. default '.'
  + elimination_rate: percent rate to reduce feature list. default .2
  + RANK: Output feature ranking. default=True (Boolean)

*Yields:*
  + dict: a dictionary with number of features, normalized mutual information score, accuracy score, and array of the indexes for features to keep
** Feature Rank Function
=feature_rank_fnc=

Ranks features.

*Args:*
 + features: A vector of feature names
 + rank: A vector with feature ranks based on absolute value of feature importance
 + n_features_to_keep: Number of features to keep. (Int)
 + fold: Fold to analyzed. (Int)
 + out_dir: Output directory for text file. Default '.'
 + RANK: Boolean (True or False)

*Yields:*
 + Text file: Ranked features by fold tab-delimited text file, only if RANK=True
** N Feature Iterator
=n_features_iter=

Determines the features to keep.

*Args:*
 + nf: current number of features
 + keep_rate: percentage of features to keep

*Yields:*
 + int: number of features to keep
** OOB Prediction
=oob_predictions=

Extracts out-of-bag (OOB) predictions from random forest classifier classes.

*Args:*
  + estimator: Random forest classifier object

*Yields:*
  + vector: OOB predicted labels
** OOB Accuracy Score
=oob_score_accuracy=

Calculates the accuracy score from the OOB predictions.

*Args:*
  + estimator: Random forest classifier object
  + Y: a vector of sample labels from training data set

*Yields:*
  + float: accuracy score
** OOB Normalized Mutual Information Score
=oob_score_nmi=

Calculates the normalized mutual information score from the OOB predictions.

*Args:*
  + estimator: Random forest classifier object
  + Y: a vector of sample labels from training data set

*Yields:*
  + float: normalized mutual information score
** OOB Area Under ROC Curve Score
=oob_score_roc=

Calculates the area under the ROC curve score for the OOB predictions.

*Args:*
  + estimator: Random forest classifier object
  + Y: a vector of sample labels from training data set

*Yields:*
  + float: AUC ROC score
** Plot Feature Elimination by Accuracy
=plot_acc=

Plot feature elimination results for accuracy.

*Args:*
  + d: feature elimination class dictionary
  + fold: current fold
  + out_dir: output directory. default '.'

*Yields:*
  + graph: plot of feature by accuracy, automatically saves files as png and svg
** Plot Feature Elimination by NMI
=plot_nmi=

Plot feature elimination results for normalized mutual information.

*Args:*
  + d: feature elimination class dictionary
  + fold: current fold
  + out_dir: output directory. default '.'

*Yields:*
  + graph: plot of feature by NMI, automatically saves files as png and svg
** Plot Feature Elimination by AUC
=plot_roc=

Plot feature elimination results for AUC ROC curve.

*Args:*
  + d: feature elimination class dictionary
  + fold: current fold
  + out_dir: output directory. default '.'

*Yields:*
  + graph: plot of feature by AUC, automatically saves files as png and svg
** Feature Elimination Subfunction
=rf_fe=

Iterate over features to by eliminated by step.

*Args:*
  + estimator: Random forest classifier object
  + X: a data frame of training data
  + Y: a vector of sample labels from training data set
  + n_features_iter: iterator for number of features to keep loop
  + features: a vector of feature names
  + fold: current fold
  + out_dir: output directory. default '.'
  + RANK: Boolean (True or False)

*Yields:*
  + list: a list with number of features, normalized mutual information score, accuracy score, and array of the indices for features to keep
** Feature Elimination Step
=rf_fe_step=

Apply random forest to training data, rank features, conduct feature elimination.

*Args:*
  + estimator: Random forest classifier object
  + X: a data frame of training data
  + Y: a vector of sample labels from training data set
  + n_features_to_keep: number of features to keep
  + features: a vector of feature names
  + fold: current fold
  + out_dir: output directory. default '.'
  + RANK: Boolean (True or False)

*Yields:*
  + dict: a dictionary with number of features, normalized mutual information score, accuracy score, and selected features
